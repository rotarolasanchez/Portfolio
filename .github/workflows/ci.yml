name: CI

on:
  push:
    branches:
      - release/*
  pull_request:
    branches:
      - release/*
  workflow_dispatch:
  issues:
    types: [opened]

jobs:
  lint:
    if: contains(github.event.head_commit.message, 'Send QA')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # Usar la distribución de Temurin

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run Lint
        run: ./gradlew lint

      - name: Debug artifacts
        run: ls -R app/build/reports

      - name: Upload html test report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html

    unit-test:
      needs: [ lint ]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout the code
          uses: actions/checkout@v2

        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin' # Usar la distribución de Temurin

        - name: Grant execute permission for gradlew
          run: chmod +x ./gradlew

        - name: Run tests
          run: ./gradlew test

        - name: Upload test report
          uses: actions/upload-artifact@v4
          with:
            name: unit_test_report
            path: app/build/reports/tests/testDebugUnitTest/

    instrumentation-test:
      needs: [ unit-test ]
      runs-on: ubuntu-latest # Cambia de macos-latest a ubuntu-latest
      steps:
        - name: Checkout the code
          uses: actions/checkout@v2

        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin' # Usar la distribución de Temurin

        - name: Grant execute permission for gradlew
          run: chmod +x ./gradlew

        - name: Run espresso tests
          uses: reactivecircus/android-emulator-runner@v2
          with:
            api-level: 29
            script: ./gradlew connectedCheck
            device: pixel_4 # Especifica un dispositivo compatible
            abi: arm64-v8a # Especifica una arquitectura compatible
        - name: Upload test report
          uses: actions/upload-artifact@v4
          with:
            name: instrumentation_test_report
            path: app/build/reports/androidTests/connected/
    sonarcloud:
      needs: [ instrumentation-test ]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout the code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Fetch full history to avoid shallow clone issues

        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin' # Usar la distribución de Temurin

        - name: Grant execute permission for gradlew
          run: chmod +x ./gradlew

        - name: Cache Gradle packages
          uses: actions/cache@v3
          with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              ${{ runner.os }}-gradle
        - name: Build and run tests with coverage
          run: ./gradlew clean build jacocoTestReport

        - name: SonarCloud Scan
          run: ./gradlew app:sonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Upload coverage report
          uses: actions/upload-artifact@v4
          with:
            name: coverage-report
            path: build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml

        - name: Check SonarQube Quality Gate
          run: |
            status=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarqube.capibarafamily.online/api/qualitygates/project_status?projectKey=Portfolio_kotlin&branch=main" | jq -r '.projectStatus.status')
            if [ "$status" != "OK" ]; then
              echo "Quality gate failed: $status"
              exit 1
            fi
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  Firebase:
    needs: [ sonarcloud ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build APK again
        run: ./gradlew assembleDebug

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Decode service account key
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 -d > firebase-key.json

      - name: Upload to Firebase App Distribution
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/firebase-key.json
        run: |
          firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups "qa" \
            --release-notes "Versión enviada desde CI automáticamente."

      - name: Clean up
        if: always()
        run: rm -f firebase-key.json
